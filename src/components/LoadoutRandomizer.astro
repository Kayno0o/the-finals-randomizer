---
import { decodeLoadouts } from '../utils/loadoutUtils'
import LoadoutCard from './LoadoutCard.astro'

const url = Astro.url
const loadoutsParam = url.searchParams.get('loadouts')
const loadouts = loadoutsParam ? decodeLoadouts(loadoutsParam) : []
---

<div class="grid grid-cols-[1fr_4fr] gap-4">
  <div class="grid h-fit">
    <label for="playerNames" class="text-lg uppercase font-bold">
      Player names
    </label>
    <div class="relative h-96">
      <textarea
        class="input h-full resize-none border-black border border-solid"
        id="playerNames"
        placeholder="Enter player names, one per line"
        autofocus
        autocorrect="off"
        spellcheck="false"
      >{loadouts.map(loadout => loadout.playerName).join('\n')}</textarea>
    </div>
    <button id="generateButton" class="btn ml-auto mt-4" onclick="generate">Generate</button>
  </div>

  <div>
    <h2 class="text-lg uppercase font-bold">Loadouts</h2>
    <div class="grid grid-cols-3 gap-4 h-fit">
      {loadouts.map(loadout => <LoadoutCard loadout={loadout} />)}
    </div>
  </div>
</div>

<script>
import type { MinifiedLoadoutType } from '../types'
import { encodeLoadouts, generateLoadout } from '../utils/loadoutUtils'

const playerNamesInput = document.getElementById('playerNames') as HTMLTextAreaElement | null
const generateButton = document.getElementById('generateButton') as HTMLButtonElement | null

if (playerNamesInput && generateButton) {
  generateButton?.addEventListener('click', () => {
    const playerNames = playerNamesInput.value
      .split('\n')
      .map(name => name.trim())
      .filter(Boolean)

    const loadouts: MinifiedLoadoutType[] = []

    for (const player of playerNames) {
      const loadout = generateLoadout(player)
      loadouts.push(loadout)
    }

    const encodedLoadouts = encodeLoadouts(loadouts)
    const currentUrl = new URL(window.location.href)
    currentUrl.searchParams.set('loadouts', encodedLoadouts)

    window.location.href = currentUrl.toString()
  })
}
</script>

---
import { randomString } from '@kaynooo/utils'
import LeaveRoomButton from './LeaveRoomButton.astro'
import LoadoutCard from './LoadoutCard.astro'
import RoomCodeForm from './RoomCodeForm.astro'

const cookies = Astro.cookies
const username = cookies.get('username')?.value ?? ''

let userId = cookies.get('userId')?.value
if (!userId) {
  userId = randomString(16)
  cookies.set('userId', userId)
}

const url = Astro.url
const roomCode = url.searchParams.get('room')
---

<div class="grid gap-4">
  <div class="flex flex-wrap gap-8">
    <RoomCodeForm />

    <form id="usernameForm" class="h-fit grid">
      <label for="username" class="label">Username</label>

      <div class="flex items-center gap-4">
        <input
          class="input resize-none border-black border border-solid"
          id="username"
          placeholder="Enter your username"
          autofocus
          autocorrect="off"
          spellcheck="false"
          value={username}
        />
        <button type="submit" class="btn ml-auto">Confirm</button>
      </div>
    </form>

    <div class="grow"></div>
    {roomCode && (<LeaveRoomButton />)}
  </div>

  {roomCode && (
    <div class="flex items-center gap-8">
      <button id="generate-button" class="btn hidden adminOnly">Generate Room</button>
      <div>
        <div class="flex items-center gap-2">
          <h2 class="label">Map</h2>

          <div
            class="i-material-symbols:refresh hidden size-4 text-accent adminOnly cursor-pointer"
            onclick="reloadMap()"
          />
        </div>
        <p id="roomMap" class="font-extrabold" />
      </div>
    </div>

    <div>
      <h2 class="label">Loadouts</h2>
      <div id="loadouts" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 h-fit" />
      <LoadoutCard />
    </div>
  )}
</div>

<style>
  .isAdmin .adminOnly {
    display: block;
  }
</style>

<script>
import type { PublicPlayerType } from '../types'
import { classes, gadgets as dataGadgets, specializations, weapons } from '../assets/loadouts.ts'
import { decodeLoadouts, html, useCookie } from '../utils'

const url = new URL(window.location.href)
const roomCode = url.searchParams.get('room')

const userId = useCookie('userId', '')
const username = useCookie('username', '')

const messageQueue: string[] = []
window.sendMessage = (message: string) => {
  messageQueue.push(message)
}

let publicId: string | undefined

if (roomCode) {
  const currentUrl = new URL(window.location.href)
  const wsProtocol = currentUrl.protocol === 'https:' ? 'wss://' : 'ws://'
  const apiHost = currentUrl.hostname
  const wsUrl = `${wsProtocol}${apiHost}/ws?id=${userId.value}&room=${roomCode}&username=${username.value}`

  const ws = new WebSocket(wsUrl)

  const roomMap = document.getElementById('roomMap')

  const loadoutTemplate = document.getElementById('loadout-card-template')
  const loadouts = document.getElementById('loadouts')

  const generateButton = document.getElementById('generate-button')
  generateButton?.addEventListener('click', () => {
    sendMessage('generate')
  })

  function generateTemplate(player: PublicPlayerType): string {
    if (!loadoutTemplate)
      return ''

    const classData = classes[player.loadout.class]
    const loadout = player.loadout

    const spe = specializations[classData.specializations[loadout.specialization]]
    const weapon = weapons[classData.weapons[loadout.weapon]]
    const gadgets = loadout.gadgets.map(gadget => dataGadgets[classData.gadgets[gadget]])

    return html(loadoutTemplate.innerHTML, {
      publicId: player.publicId,
      class: [
        player.publicId === publicId ? 'isCurrent' : 'notCurrent',
        player.afk ? 'isAfk' : 'isOnline',
      ].join(' '),
      icon: player.isMaster ? 'i-material-symbols-light:crown' : 'i-material-symbols-light:account-circle text-light',
      username: player.name,
      loadoutClass: classData.name,
      loadoutSpecialization: spe.name,
      loadoutSpecializationIcon: spe.icon,
      loadoutWeapon: weapon.name,
      loadoutWeaponIcon: weapon.icon,
      loadoutGadget1: gadgets[0].name,
      loadoutGadget1Icon: gadgets[0].icon,
      loadoutGadget2: gadgets[1].name,
      loadoutGadget2Icon: gadgets[1].icon,
      loadoutGadget3: gadgets[2].name,
      loadoutGadget3Icon: gadgets[2].icon,
    })
  }

  function playerFromString(value: string): PublicPlayerType {
    const args = value.split(':')
    return {
      publicId: args[0],
      name: args[1],
      isMaster: args[2] === '1',
      afk: args[3] === '1',
      loadout: decodeLoadouts(Number.parseInt(args[4])),
    }
  }

  window.generatePlayer = (publicId: string) => {
    sendMessage(`generate;${publicId}`)
  }

  window.removePlayer = (publicId: string) => {
    sendMessage(`removePlayer;${publicId}`)
  }

  window.reloadMap = () => {
    sendMessage('reloadMap')
  }

  const players: Record<string, PublicPlayerType> = {}

  let sortedPlayers: PublicPlayerType[] = []

  function sortPlayers() {
    sortedPlayers = Object.values(players).sort((a, b) => {
      if (a.publicId === publicId)
        return -1
      if (b.publicId === publicId)
        return 1

      if (a.isMaster)
        return -1
      if (b.isMaster)
        return 1

      if (a.afk)
        return 1
      if (b.afk)
        return -1

      return 0
    })
  }

  function updateLoadoutsDOM() {
    sortPlayers()

    if (loadouts)
      loadouts.innerHTML = sortedPlayers.map(generateTemplate).join('')

    if (publicId) {
      const player = players[publicId]
      document.documentElement.classList.toggle('isAdmin', Boolean(player?.isMaster))
    }
  }

  ws.addEventListener('message', (e) => {
    const [command, ...args] = String(e.data).split(';')

    switch (command) {
      case 'room': {
        roomMap && (roomMap.innerHTML = args[0])
        publicId = args[1]

        for (const player of args.slice(2).map(playerFromString)) {
          players[player.publicId] = player
        }

        updateLoadoutsDOM()

        break
      }

      case 'map': {
        roomMap && (roomMap.innerHTML = args[0])

        break
      }

      case 'player': {
        const updatedPlayer = playerFromString(args[0])

        players[updatedPlayer.publicId] = updatedPlayer

        updateLoadoutsDOM()

        break
      }

      case 'removePlayer': {
        console.log(publicId, args[0])
        if (args[0] === publicId) {
          const currentUrl = new URL(window.location.href)
          currentUrl.searchParams.delete('room')

          window.location.href = currentUrl.toString()
          return
        }

        delete players[args[0]]

        updateLoadoutsDOM()

        break
      }

      case 'ping': {
        sendMessage('pong')

        break
      }
    }
  })

  ws.addEventListener('open', () => {
    // send missed messages
    for (const message of messageQueue) ws.send(message)

    window.sendMessage = (message: string) => ws.send(message)
  })
}

const usernameField = document.getElementById('username') as HTMLInputElement | null
document.getElementById('usernameForm')?.addEventListener('submit', (e) => {
  e.preventDefault()

  if (!usernameField)
    return

  const sanitizedUsername = usernameField.value.replace(/[^A-Z0-9 ]/gi, '')

  username.value = sanitizedUsername
  usernameField.value = sanitizedUsername

  sendMessage(`username;${sanitizedUsername}`)
})
</script>

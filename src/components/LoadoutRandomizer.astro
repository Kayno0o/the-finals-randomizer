---
import { randomString } from '@kaynooo/utils'
import LeaveRoomButton from './LeaveRoomButton.astro'
import LoadoutCard from './LoadoutCard.astro'
import RoomCodeForm from './RoomCodeForm.astro'

const cookies = Astro.cookies
const username = cookies.get('username')?.value ?? ''

let userId = cookies.get('userId')?.value
if (!userId) {
  userId = randomString(16)
  cookies.set('userId', userId)
}

const url = Astro.url
const roomCode = url.searchParams.get('room')
---

<div class="grid gap-4">
  <div class="flex gap-8">
    <RoomCodeForm />

    <form id="usernameForm" class="h-fit grid">
      <label for="username" class="label">Username</label>

      <div class="flex items-center gap-4">
        <input
          class="input resize-none border-black border border-solid"
          id="username"
          placeholder="Enter your username"
          autofocus
          autocorrect="off"
          spellcheck="false"
          value={username}
        />
        <button type="submit" class="btn ml-auto">Confirm</button>
      </div>
    </form>

    <div class="grow"></div>
    {roomCode && (<LeaveRoomButton />)}
  </div>

  {roomCode && (<div class="flex items-center gap-8">
    <button id="generate-button" class="btn hidden">Generate</button>
    <div>
      <h2 class="label">Map</h2>
      <p id="roomMap" class="font-extrabold" />
    </div>
  </div>

  <div>
    <h2 class="label">Loadouts</h2>
    <div id="loadouts" class="grid grid-cols-3 gap-4 h-fit" />
    <LoadoutCard />
  </div>)}
</div>

<script>
import type { PlayerType } from '../types'
import data from '../assets/data.json'
import { useCookie } from '../utils/cookieUtils'
import { decodeLoadouts } from '../utils/loadoutUtils'

const url = new URL(window.location.href)
const roomCode = url.searchParams.get('room')

const userId = useCookie('userId', '')
const username = useCookie('username', '')

const messageQueue: string[] = []
window.sendMessage = (message: string) => {
  messageQueue.push(message)
}

let publicId: string | undefined

if (roomCode) {
  const ws = new WebSocket(`wss://api-the-finals-dev.kevyn.fr/ws?id=${userId.value}&room=${roomCode}&username=${username.value}`)

  const roomMap = document.getElementById('roomMap')

  const loadoutTemplate = document.getElementById('loadout-card-template')
  const loadouts = document.getElementById('loadouts')

  const generateButton = document.getElementById('generate-button')
  generateButton?.addEventListener('click', () => {
    sendMessage('generate')
  })

  function generateTemplate(player: PlayerType): string {
    if (!loadoutTemplate)
      return ''
    const classData = data[player.loadout.class]
    return loadoutTemplate.innerHTML
      .replace('[isCurrentPlayer]', String(player.publicId === publicId))
      .replace('[usernameClass]', player.publicId === publicId ? '' : 'text-light underline underline-accent')
      .replace('[icon]', player.isMaster ? 'i-material-symbols-light:crown' : 'i-material-symbols-light:account-circle text-light')
      .replace('[username]', player.name)
      .replace('[class]', classData.name)
      .replace('[specialization]', classData.specializations[player.loadout.specialization])
      .replace('[weapon]', classData.weapons[player.loadout.weapon])
      .replace('[gadgets]', player.loadout.gadgets.map(gadgetIndex => `<li>${classData.gadgets[gadgetIndex]}</li>`).join(''))
  }

  function playerFromString(value: string): PlayerType {
    const args = value.split(':')
    return {
      publicId: args[0],
      name: args[1],
      isMaster: args[2] === 'true',
      loadout: decodeLoadouts(Number.parseInt(args[3])),
    }
  }

  ws.addEventListener('message', (e) => {
    const [command, ...args] = String(e.data).split(';')

    if (command === 'room') {
      roomMap && (roomMap.innerHTML = args[0])
      publicId = args[1]

      const players = args.slice(2).map(playerFromString)

      if (loadouts)
        loadouts.innerHTML = players.map(generateTemplate).join('')

      const player = players.find(player => player.publicId === publicId)

      generateButton?.classList.toggle('hidden', !player?.isMaster)
    }

    if (command === 'ping') {
      sendMessage('pong')
    }
  })

  ws.addEventListener('open', () => {
    // send missed messages
    for (const message of messageQueue) ws.send(message)

    window.sendMessage = (message: string) => ws.send(message)
  })
}

const usernameField = document.getElementById('username') as HTMLInputElement | null
document.getElementById('usernameForm')?.addEventListener('submit', (e) => {
  e.preventDefault()

  if (!usernameField)
    return

  const sanitizedUsername = usernameField.value.replace(/[^A-Z0-9 ]/gi, '')

  username.value = sanitizedUsername
  usernameField.value = sanitizedUsername

  sendMessage(`username;${sanitizedUsername}`)
})
</script>
